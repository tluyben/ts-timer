import ts from "typescript";

export function createPreamble(factory: ts.NodeFactory, maxDepth: number, verbose: boolean): ts.Statement[] {
  // Create _____timerPush function
  const timerPushFunction = factory.createFunctionDeclaration(
    undefined,
    undefined,
    factory.createIdentifier("_____timerPush"),
    undefined,
    [
      factory.createParameterDeclaration(
        [],
        undefined,
        factory.createIdentifier("params"),
        undefined,
        factory.createTypeLiteralNode([
          factory.createPropertySignature(
            undefined,
            factory.createIdentifier("line"),
            undefined,
            factory.createKeywordTypeNode(ts.SyntaxKind.NumberKeyword)
          ),
          factory.createPropertySignature(
            undefined,
            factory.createIdentifier("code"),
            undefined,
            factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword)
          ),
          factory.createPropertySignature(
            undefined,
            factory.createIdentifier("start"),
            undefined,
            factory.createTypeReferenceNode("Date", undefined)
          ),
          factory.createPropertySignature(
            undefined,
            factory.createIdentifier("end"),
            undefined,
            factory.createTypeReferenceNode("Date", undefined)
          ),
          factory.createPropertySignature(
            undefined,
            factory.createIdentifier("diff"),
            undefined,
            factory.createKeywordTypeNode(ts.SyntaxKind.NumberKeyword)
          ),
        ])
      ),
    ],
    undefined,
    factory.createBlock(
      [
        factory.createIfStatement(
          verbose ? factory.createTrue() : factory.createFalse(),
          factory.createBlock(
            [
              factory.createExpressionStatement(
                factory.createCallExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier("_____ptimers"),
                    factory.createIdentifier("push")
                  ),
                  undefined,
                  [factory.createIdentifier("params")]
                )
              ),
            ],
            true
          ),
          factory.createBlock(
            [
              factory.createVariableStatement(
                undefined,
                factory.createVariableDeclarationList(
                  [
                    factory.createVariableDeclaration(
                      factory.createIdentifier("i"),
                      undefined,
                      undefined,
                      factory.createCallExpression(
                        factory.createPropertyAccessExpression(
                          factory.createIdentifier("_____ptimers"),
                          factory.createIdentifier("findIndex")
                        ),
                        undefined,
                        [
                          factory.createArrowFunction(
                            undefined,
                            undefined,
                            [
                              factory.createParameterDeclaration(
                                undefined,
                                undefined,
                                factory.createIdentifier("x"),
                                undefined,
                                factory.createKeywordTypeNode(
                                  ts.SyntaxKind.AnyKeyword
                                )
                              ),
                            ],
                            undefined,
                            factory.createToken(
                              ts.SyntaxKind.EqualsGreaterThanToken
                            ),
                            factory.createBinaryExpression(
                              factory.createPropertyAccessExpression(
                                factory.createIdentifier("x"),
                                factory.createIdentifier("line")
                              ),
                              factory.createToken(
                                ts.SyntaxKind.EqualsEqualsEqualsToken
                              ),
                              factory.createPropertyAccessExpression(
                                factory.createIdentifier("params"),
                                factory.createIdentifier("line")
                              )
                            )
                          ),
                        ]
                      )
                    ),
                  ],
                  ts.NodeFlags.Const
                )
              ),
              factory.createIfStatement(
                factory.createBinaryExpression(
                  factory.createIdentifier("i"),
                  factory.createToken(ts.SyntaxKind.LessThanToken),
                  factory.createNumericLiteral("0")
                ),
                factory.createExpressionStatement(
                  factory.createCallExpression(
                    factory.createPropertyAccessExpression(
                      factory.createIdentifier("_____ptimers"),
                      factory.createIdentifier("push")
                    ),
                    undefined,
                    [factory.createIdentifier("params")]
                  )
                ),
                factory.createBlock(
                  [
                    factory.createExpressionStatement(
                      factory.createBinaryExpression(
                        factory.createPropertyAccessExpression(
                          factory.createElementAccessExpression(
                            factory.createIdentifier("_____ptimers"),
                            factory.createIdentifier("i")
                          ),
                          factory.createIdentifier("diff")
                        ),
                        factory.createToken(ts.SyntaxKind.PlusEqualsToken),
                        factory.createPropertyAccessExpression(
                          factory.createIdentifier("params"),
                          factory.createIdentifier("diff")
                        )
                      )
                    ),
                    factory.createExpressionStatement(
                      factory.createBinaryExpression(
                        factory.createPropertyAccessExpression(
                          factory.createElementAccessExpression(
                            factory.createIdentifier("_____ptimers"),
                            factory.createIdentifier("i")
                          ),
                          factory.createIdentifier("end")
                        ),
                        factory.createToken(ts.SyntaxKind.EqualsToken),
                        factory.createPropertyAccessExpression(
                          factory.createIdentifier("params"),
                          factory.createIdentifier("end")
                        )
                      )
                    ),
                  ],
                  true
                )
              ),
            ],
            true
          )
        ),
      ],
      true
    )
  );

  // Create preamble
  const preamble: ts.Statement[] = [
    // Timer array
    factory.createVariableStatement(
      undefined,
      factory.createVariableDeclarationList(
        [
          factory.createVariableDeclaration(
            factory.createIdentifier("_____ptimers"),
            undefined,
            undefined,
            factory.createArrayLiteralExpression([])
          ),
        ],
        ts.NodeFlags.Const
      )
    ),
    // Add _____timerPush function
    timerPushFunction,
  ];

  // Create timer variables for each depth
  for (let i = 0; i <= maxDepth - 1; i++) {
    const suffix = i === 0 ? "" : `_${i}`;
    preamble.push(
      factory.createVariableStatement(
        undefined,
        factory.createVariableDeclarationList(
          [
            factory.createVariableDeclaration(
              factory.createIdentifier(`_____sftimer${suffix}`),
              undefined,
              undefined,
              undefined
            ),
          ],
          ts.NodeFlags.Let
        )
      ),
      factory.createVariableStatement(
        undefined,
        factory.createVariableDeclarationList(
          [
            factory.createVariableDeclaration(
              factory.createIdentifier(`_____eftimer${suffix}`),
              undefined,
              undefined,
              undefined
            ),
          ],
          ts.NodeFlags.Let
        )
      )
    );
  }

  return preamble;
}
